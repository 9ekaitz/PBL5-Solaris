/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 21 11:17:25 GMT 2022
 */

package eus.solaris.solaris.service.multithreading;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import eus.solaris.solaris.service.multithreading.conversions.ConversionType;

public class ProcesserTest {

    @Test
    @Timeout(4)
    public void test00() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        Instant instant0 = Instant.ofEpochSecond((-2222L), 0L);
        Double double0 = 0.0;
        hashMap0.put(instant0, double0);
        ConversionType conversionType0 = ConversionType.TO_AVOIDED_TEMP_F;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertFalse(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test01() throws Throwable {
        ConversionType conversionType0 = ConversionType.TO_AVOIDED_MM_INCREASE;
        assertThrows(NullPointerException.class, () -> Processer.process((Map<Instant, Double>) null, conversionType0));
    }

    @Test
    @Timeout(4)
    public void test02() throws Throwable {
        assertThrows(NullPointerException.class, () -> Processer.groupPanels((Map<Instant, Double>) null));
    }

    @Test
    @Timeout(4)
    public void test03() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        Instant instant0 = Instant.ofEpochSecond((-2222L), 0L);
        Double double0 = 0.0;
        hashMap0.put(instant0, double0);
        Map<Instant, Double> map0 = Processer.groupPanels(hashMap0);
        assertEquals(1, map0.size());
    }

    @Test
    @Timeout(4)
    public void test04() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        Map<Instant, Double> map0 = Processer.groupPanels(hashMap0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test05() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.NONE;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test06() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.TO_AVOIDED_MM_INCREASE;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test07() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.TO_AVOIDED_TEMP_C;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test08() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.TO_AVOIDED_CO2;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test09() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.TO_POUNDS;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test10() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.TO_DOLLAR;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertTrue(map0.isEmpty());
    }

    @Test
    @Timeout(4)
    public void test11() throws Throwable {
        HashMap<Instant, Double> hashMap0 = new HashMap<Instant, Double>();
        ConversionType conversionType0 = ConversionType.TO_EUR;
        Map<Instant, Double> map0 = Processer.process(hashMap0, conversionType0);
        assertEquals(0, map0.size());
    }
}
